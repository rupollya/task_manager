@pytest.mark.asyncio
async def test_user_registration():
    async with httpx.AsyncClient(app=app, base_url="http://testserver") as client:
        response = await client.post(
            "/registration",
            json={
                "login": "test_user",
                "password": "test_password",
            },  # надо менять если новое
        )
        assert response.status_code == 200, f"Ошибка регистрации: {response.text}"



# Тест на авторизацию после регистрации  РАБ
@pytest.mark.asyncio
async def test_user_authentication():
    async with httpx.AsyncClient(app=app, base_url="http://testserver") as client:
        registration_response = await client.post(
            "/registration",
            json={
                "login": "test_user_auth1",
                "password": "test_password_auth",
            },
        )
        assert registration_response.status_code == 200, f"Ошибка регистрации: {registration_response.text}"

        # АВТОРИЗУЕМСЯ
        auth_response = await client.post(
            "/auth",  
            json={
                "login": "test_user_auth1",
                "password": "test_password_auth",
            },
        )
        assert auth_response.status_code == 200, f"Ошибка авторизации: {auth_response.text}"
        assert "access_token" in auth_response.json(), "Токен доступа не был возвращен"


# тест на добавление новой задачи 
@pytest.mark.asyncio
async def test_create_task():
    async with httpx.AsyncClient(app=app, base_url="http://testserver") as client:
        # Регистрация нового пользователя
        registration_response = await client.post(
            "/registration",
            json={
                "login": "test212",
                "password": "test212",
            },
        )
        assert registration_response.status_code == 200, f"Ошибка регистрации: {registration_response.text}"

        # Авторизация пользователя
        auth_response = await client.post(
            "/auth",  
            json={
                "login": "test212",
                "password": "test212",
            },
        )
        assert auth_response.status_code == 200, f"Ошибка авторизации: {auth_response.text}"
        access_token = auth_response.json()["access_token"]

        # Проверка, что токен действителен
        print(f"Токен доступа: {access_token}")
        access_token = auth_response.json()["access_token"]

        client.cookies.set("access_token", access_token) 

        #создание новой задачи
        task_data = {
            "heading": "Task",
            "task_text": "This is a test task.",
            "prize": "100",
            "important": True,
            "completed": False,
            "data_stop": "20-02-2025"
        }

        create_task_response = await client.post(
            "/task_dob.html",
            json=task_data,
        )
        
        assert create_task_response.status_code == 200, f"Ошибка создания задачи: {create_task_response.text}"
